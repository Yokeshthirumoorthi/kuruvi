version: '3.5'

services:
################################################################################
# Frontend
################################################################################
  frontend:
    container_name: ${FRONTEND_SERVICE}
    build:
      context: ../../src/frontend 
      dockerfile: Dockerfile
    environment:
     - FRONTEND_PORT=${FRONTEND_PORT}
    ports:
     - ${FRONTEND_PORT}:${FRONTEND_PORT}
    volumes:
     - album-static-gen:/srv
    restart: on-failure

################################################################################
# Storage
################################################################################    
  photo-upload-server:
    container_name: ${PHOTO_UPLOAD_SERVER_SERVICE}
    build:
      context: ../../src/storage/photo-upload-server
      dockerfile: Dockerfile
      args:
        - PHOTO_UPLOAD_SERVER_PORT:${PHOTO_UPLOAD_SERVER_PORT}
    volumes:
      - album-uploads:/srv/album-uploads
    ports:
      - ${PHOTO_UPLOAD_SERVER_PORT}:${PHOTO_UPLOAD_SERVER_PORT}
    restart: always

  caddy-server:
    container_name: ${CADDY_SERVER_SERVICE}
    build:
      context: ../../src/storage/caddy-server
      dockerfile: Dockerfile
    volumes:
      - album-uploads:/srv/album-uploads
    ports:
      - ${CADDY_SERVER_PORT}:${CADDY_SERVER_PORT}
    restart: on-failure

  static-generator:
    container_name: ${STATIC_GENERATOR_SERVICE}
    build:
      context: ../../src/storage/static-generator
      dockerfile: Dockerfile
      args:
        - STATIC_GENETATOR_PORT:${STATIC_GENERATOR_PORT}
    ports:
      - ${STATIC_GENERATOR_PORT}:${STATIC_GENERATOR_PORT}
    volumes:
      - album-uploads:/srv/album-uploads
      - album-static-gen:/srv/album-static-gen
      - album-faces:/srv/album-faces
      - album-resized:/srv/album-resized
    depends_on:
      - storage-dgraph
    restart: always

  storage-api:
    container_name: ${STORAGE_API_SERVICE}
    build:
      context: ../../src/storage/storage-api
      dockerfile: Dockerfile
      args:
        STORAGE_API_PORT: ${STORAGE_API_PORT}
    depends_on:
      - storage-dgraph
    restart: always

  storage-queue:
    container_name: ${STORAGE_QUEUE_SERVICE}
    build:
      context: ../../src/storage/storage-queue
      dockerfile: Dockerfile
    restart: on-failure

################################################################################
# ServiceX
################################################################################

  servicex:
    container_name: ${SERVICE_X_SERVICE}
    build:
      context: ../../src/serviceX 
      dockerfile: Dockerfile
    restart: on-failure

################################################################################
# Exif
################################################################################
  exif-core:
    container_name: ${EXIF_CORE_SERVICE}
    build:
      context: ../../src/exif/exif-core
      dockerfile: Dockerfile
      args:
        EXIF_CORE_PORT: ${EXIF_CORE_PORT}
    restart: on-failure

  exif-api:
    container_name: ${EXIF_API_SERVICE}
    build:
      context: ../../src/exif/exif-api
      dockerfile: Dockerfile
      args:
        EXIF_API_PORT: ${EXIF_API_PORT}
    depends_on:
      - exif-dgraph
    restart: always

  exif-queue:
    container_name: ${EXIF_QUEUE_SERVICE}
    build:
      context: ../../src/exif/exif-queue
      dockerfile: Dockerfile
    restart: on-failure

################################################################################
# D-Graph Cluster
################################################################################
  zero:
    container_name: ${DGRAPH_ZERO}
    build:
      context: ../../src/exif/exif-dgraph
      dockerfile: Dockerfile
    volumes:
      - dgraph-zero:/dgraph
    ports:
      - ${DGRAPH_ZERO_PORT_1}:${DGRAPH_ZERO_PORT_1}
      - ${DGRAPH_ZERO_PORT_2}:${DGRAPH_ZERO_PORT_2}
    restart: on-failure
    command: dgraph zero --my=${DGRAPH_ZERO}:${DGRAPH_ZERO_PORT_1} --replicas=3

  storage-dgraph:
    container_name: ${STORAGE_DGRAPH}
    build:
      context: ../../src/storage/storage-db
      dockerfile: Dockerfile
    volumes:
      - dgraph-storage:/dgraph  
    ports:
      - ${STORAGE_DGRAPH_PORT_1}:${STORAGE_DGRAPH_PORT_1}
      - ${STORAGE_DGRAPH_PORT_2}:${STORAGE_DGRAPH_PORT_2}
    restart: on-failure
    command: dgraph alpha --my=${STORAGE_DGRAPH}:${STORAGE_DGRAPH_PORT_3} --lru_mb=2048 --zero=${DGRAPH_ZERO}:${DGRAPH_ZERO_PORT_1}

  exif-dgraph:
    container_name: ${EXIF_DGRAPH}
    build:
      context: ../../src/exif/exif-dgraph
      dockerfile: Dockerfile
    volumes:
      - dgraph-exif:/dgraph
    ports:
      - ${EXIF_DGRAPH_PORT_1}:${EXIF_DGRAPH_PORT_1}
      - ${EXIF_DGRAPH_PORT_2}:${EXIF_DGRAPH_PORT_2}
    restart: on-failure
    command: dgraph alpha --my=${EXIF_DGRAPH}:${EXIF_DGRAPH_PORT_3} --lru_mb=2048 --zero=${DGRAPH_ZERO}:${DGRAPH_ZERO_PORT_1} -o 1

  pgsql-dgraph:
    container_name: ${PGSQL_DGRAPH}
    build:
      context: ../../src/pgsql/pgsql-dgraph
      dockerfile: Dockerfile
    volumes:
      - dgraph-pgsql:/dgraph
    ports:
      - ${PGSQL_DGRAPH_PORT_1}:${PGSQL_DGRAPH_PORT_1}
      - ${PGSQL_DGRAPH_PORT_2}:${PGSQL_DGRAPH_PORT_2}
    restart: on-failure
    command: dgraph alpha --my=${PGSQL_DGRAPH}:${PGSQL_DGRAPH_PORT_3} --lru_mb=2048 --zero=${DGRAPH_ZERO}:${DGRAPH_ZERO_PORT_1} -o 2

  ratel:
    container_name: ${DGRAPH_RATEL}
    build:
      context: ../../src/exif/exif-dgraph
      dockerfile: Dockerfile
    ports:
      - ${DGRAPH_RATEL_PORT}:8000
    command: dgraph-ratel

################################################################################
# Face
################################################################################
  face-api:
    container_name: ${FACE_API_SERVICE}
    build:
      context: ../../src/faces/face-api
      dockerfile: Dockerfile
      args:
        FACE_API_PORT: ${FACE_API_PORT}
    restart: on-failure

  face-queue:
    container_name: ${FACE_QUEUE_SERVICE}
    build:
      context: ../../src/faces/face-queue
      dockerfile: Dockerfile
    restart: on-failure
    
  face-detect:
    container_name: ${FACE_DETECT_SERVICE}
    build:
      context: ../../src/faces/face-detect
      dockerfile: Dockerfile
      args:
        FACE_DETECT_PORT: ${FACE_DETECT_PORT}
    volumes:
      - album-uploads:/srv/album-uploads
    restart: on-failure

  face-crop:
    container_name: ${FACE_CROP_SERVICE}
    build:
      context: ../../src/faces/face-crop
      dockerfile: Dockerfile
      args:
        FACE_CROP_PORT: ${FACE_CROP_PORT}
    volumes:
      - album-faces:/srv/faces
    restart: on-failure

  face-crop-server:
    container_name: ${FACE_CROP_SERVER_SERVICE}
    build:
      context: ../../src/faces/face-crop-server
      dockerfile: Dockerfile
    restart: on-failure

################################################################################
# Resize
################################################################################
  resize-core:
    container_name: ${RESIZE_CORE_SERVICE}
    build:
      context: ../../src/resize/resize-core
      dockerfile: Dockerfile
      args:
        RESIZE_CORE_PORT: ${RESIZE_CORE_PORT}
    restart: on-failure

  resize-api:
    container_name: ${RESIZE_API_SERVICE}
    build:
      context: ../../src/resize/resize-api
      dockerfile: Dockerfile
      args:
        RESIZE_API_PORT: ${RESIZE_API_PORT}
    volumes:
      - album-resized:/srv/resized
    restart: on-failure

  resize-queue:
    container_name: ${RESIZE_QUEUE_SERVICE}
    build:
      context: ../../src/resize/resize-queue
      dockerfile: Dockerfile
    restart: on-failure

################################################################################
# PGSql
################################################################################
  pgsql-core:
    container_name: ${PGSQL_CORE_SERVICE}
    build:
      context: ../../src/pgsql/pgsql-core
      dockerfile: Dockerfile
      args:
        PGSQL_CORE_PORT: ${PGSQL_CORE_PORT}
    restart: on-failure

  pgsql-api:
    container_name: ${PGSQL_API_SERVICE}
    build:
      context: ../../src/pgsql/pgsql-api
      dockerfile: Dockerfile
      args:
        PGSQL_API_PORT: ${PGSQL_API_PORT}
    restart: on-failure

  pgsql-queue:
    container_name: ${PGSQL_QUEUE_SERVICE}
    build:
      context: ../../src/pgsql/pgsql-queue
      dockerfile: Dockerfile
    restart: on-failure

  pgadmin4:
    container_name: pgadmin4
    image: "thajeztah/pgadmin4"
    ports:
      - "5050:5050"
  
  adminer:
    image: adminer
    restart: always
    ports:
      - 8090:8080

volumes:
  album-uploads:
  album-static-gen:
  album-faces:
  album-resized:
  dgraph-zero:
  dgraph-exif:
  dgraph-storage:
  dgraph-pgsql: