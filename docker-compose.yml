version: '3.5'

services:

  express:
    container_name: web-server
    build:
      context: ./src/express
      dockerfile: Dockerfile
    volumes:
      - albums:/usr/src/app/uploads
      - ./pb:/usr/src/pb
    ports:
      - '8000:8000'
    networks:
      - frontend

  react-web:
    container_name: react-web
    build:
      context: ./src/react-web
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    networks:
      - frontend

  database-api:
    container_name: rust-postgres
    build:
      context: ./src/rust-postgres
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    networks:
      - frontend

  postgresql:
    container_name: postgres-db
    image: "postgres:9"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    environment:
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - frontend

  pgadmin4:
    container_name: pgadmin4
    image: "thajeztah/pgadmin4"
    ports:
      - "5050:5050"
    networks:
      - frontend

  rabbitmq:
    container_name: rabbit
    image: "rabbitmq:3.7-management"
    networks:
      - frontend
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - 'rabbitmq_data:/var/lib/rabbitmq'
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmquser
      - RABBITMQ_DEFAULT_PASS=some_password

  node-exif:
    container_name: node-exif
    build:
      context: ./src/node-exif
      dockerfile: Dockerfile
    volumes:
      - albums:/usr/src/app/uploads
    networks:
      - frontend
    restart: on-failure

  node-database:
    container_name: node-database
    build:
      context: ./src/node-database
      dockerfile: Dockerfile
    networks:
      - frontend
    volumes:
      - ./pb:/usr/src/pb
    restart: on-failure

  node-imgproxy:
    container_name: node-imgproxy
    build:
      context: ./src/node-imgproxy
      dockerfile: Dockerfile
    volumes:
      - albums:/usr/src/app/uploads
      - resized_albums:/usr/src/app/resized
    networks:
      - frontend
    restart: on-failure

  imgproxy:
    container_name: imgproxy
    image: "darthsim/imgproxy:latest"
    volumes:
      - albums:/usr/src/app/uploads
    ports:
      - '8080:8080'
    networks:
      - frontend
    restart: on-failure

  caddy-fs:
    container_name: caddy-fs
    image: "abiosoft/caddy"
    volumes:
      - albums:/srv
      - resized_albums:/srv/resized
    ports:
      - '2015:2015'
    networks:
      - frontend
    restart: on-failure

volumes:
  albums:
  resized_albums:
  pgdata:
  rabbitmq_data:
    driver: local

networks:
  frontend:
