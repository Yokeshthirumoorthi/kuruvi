/*
 *
 * Copyright Â© 2019 Yokesh Thirumoorthi.
 *
 * [This program is licensed under the "MIT License"]
 * Please see the file LICENSE in the source
 * distribution of this software for license terms.
 *
 */

syntax = "proto3";

package kuruvi;

// -----------------Common types that are almost similar to db schema def-----------------

message Album {
    int32 id = 1;
    string name= 2;
}

message Photo {
    int32 id= 1;
    string albumId= 2;
    string name= 3;
}

message PhotoDetails {
    Album album= 1;
    Photo photo= 2;
    // Exif exif= 3;
    // repeated BoundingBoxes boundingBoxes= 4;
    // repeated Faces faces= 5;
    // repeated FaceDescriptors faceDescriptors= 6;
}


// -----------------ServiceX grpc server functions-----------------

// This message is sent by photo-upload-server
// after saving all photos in the disk
message SavePhotoRequest {
    string albumName = 1;
    string photoName = 2;
}

message InitWorkFlowRequest {
    string albumName = 1;
    repeated string photos = 2;
}

message AlbumInfo {
    string name=1;
}

message Empty {}

service ServiceX {
    // A Simple RPC
    //
    // Saves the album details and photo details in database
    rpc savePhoto (SavePhotoRequest) returns (PhotoDetails) {}
    // A Simple RPC
    //
    // It will execute a set of workflow 
    // and extracts more details about the photo
    rpc initWorkFlow (InitWorkFlowRequest) returns (Empty) {}
}

// -----------------Static generator server functions-----------------

message AlbumFolder {
    string albumName= 1;
    string tagName=2;
    repeated string photos= 3;
}

message AlbumFolders {
    repeated AlbumFolder albums =1;
}

service StaticGenerator {
    // A Simple RPC
    //
    // Copies uploaded files to new folders based exif data
    rpc createExifFolders (AlbumFolders) returns (AlbumInfo) {}
    // A Simple RPC
    //
    // Creates the web directory with js, html and the 
    // cache contents
    rpc createStaticWebDirectory (AlbumInfo) returns (Empty) {}
}

// -----------------Exif functions-----------------

// remote url of photo for exif extraction
message PhotoURL {
    string url= 1;
}

// exif details extracted from a photo
message ExifData {
    string name= 1;
    string make= 2;
    string model= 3;
    int32 create_on= 4;
    int32 width= 5;
    int32 height= 6;
}

message ExififyAlbumRequest {
    string albumName = 1;
    repeated string photos = 2;
}

// message to acknowledge the status
message JobStatus {
    int32 success =1;
    int32 error =2;
}

service ExifCore {
    // A Simple RPC
    // 
    // Downloads photo from remote server and extracts exif 
    rpc extractExif (PhotoURL) returns (ExifData) {}
}

service ExifApi {
    // A Simple RPC
    //
    // Gets the exif details of all photos in an album
    // and save it to database
    rpc exififyAlbum (ExififyAlbumRequest) returns (AlbumFolders) {}
}