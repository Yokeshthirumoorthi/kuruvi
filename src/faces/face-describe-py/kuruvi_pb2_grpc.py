# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import kuruvi_pb2 as kuruvi__pb2


class ServiceXStub(object):
  """*******************************************************************************
  Services
  *******************************************************************************

  -----------------ServiceX grpc server functions-----------------

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.initWorkFlow = channel.unary_unary(
        '/kuruvi.ServiceX/initWorkFlow',
        request_serializer=kuruvi__pb2.AlbumFolder.SerializeToString,
        response_deserializer=kuruvi__pb2.Empty.FromString,
        )


class ServiceXServicer(object):
  """*******************************************************************************
  Services
  *******************************************************************************

  -----------------ServiceX grpc server functions-----------------

  """

  def initWorkFlow(self, request, context):
    """A Simple RPC

    It will execute a set of workflow 
    and extracts more details about the photo
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServiceXServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'initWorkFlow': grpc.unary_unary_rpc_method_handler(
          servicer.initWorkFlow,
          request_deserializer=kuruvi__pb2.AlbumFolder.FromString,
          response_serializer=kuruvi__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.ServiceX', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class StaticGeneratorStub(object):
  """-----------------Static generator server functions-----------------

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.createStaticWebDirectory = channel.unary_unary(
        '/kuruvi.StaticGenerator/createStaticWebDirectory',
        request_serializer=kuruvi__pb2.AlbumFolder.SerializeToString,
        response_deserializer=kuruvi__pb2.Empty.FromString,
        )


class StaticGeneratorServicer(object):
  """-----------------Static generator server functions-----------------

  """

  def createStaticWebDirectory(self, request, context):
    """A Simple RPC

    Creates the web directory with js, html and the 
    cache contents
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StaticGeneratorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'createStaticWebDirectory': grpc.unary_unary_rpc_method_handler(
          servicer.createStaticWebDirectory,
          request_deserializer=kuruvi__pb2.AlbumFolder.FromString,
          response_serializer=kuruvi__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.StaticGenerator', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ExifCoreStub(object):
  """-----------------Exif functions-----------------

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.extractExif = channel.unary_unary(
        '/kuruvi.ExifCore/extractExif',
        request_serializer=kuruvi__pb2.PhotoURL.SerializeToString,
        response_deserializer=kuruvi__pb2.ExifData.FromString,
        )


class ExifCoreServicer(object):
  """-----------------Exif functions-----------------

  """

  def extractExif(self, request, context):
    """A Simple RPC

    Downloads photo from remote server and extracts exif 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ExifCoreServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'extractExif': grpc.unary_unary_rpc_method_handler(
          servicer.extractExif,
          request_deserializer=kuruvi__pb2.PhotoURL.FromString,
          response_serializer=kuruvi__pb2.ExifData.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.ExifCore', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ExifApiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.exififyAlbum = channel.unary_unary(
        '/kuruvi.ExifApi/exififyAlbum',
        request_serializer=kuruvi__pb2.AlbumFolder.SerializeToString,
        response_deserializer=kuruvi__pb2.JobStatus.FromString,
        )


class ExifApiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def exififyAlbum(self, request, context):
    """A Simple RPC

    Gets the exif details of all photos in an album
    and save it to database
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ExifApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'exififyAlbum': grpc.unary_unary_rpc_method_handler(
          servicer.exififyAlbum,
          request_deserializer=kuruvi__pb2.AlbumFolder.FromString,
          response_serializer=kuruvi__pb2.JobStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.ExifApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class FaceApiStub(object):
  """-----------------Face Api functions-----------------

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.cropAlbumFaces = channel.unary_unary(
        '/kuruvi.FaceApi/cropAlbumFaces',
        request_serializer=kuruvi__pb2.AlbumFolder.SerializeToString,
        response_deserializer=kuruvi__pb2.JobStatus.FromString,
        )


class FaceApiServicer(object):
  """-----------------Face Api functions-----------------

  """

  def cropAlbumFaces(self, request, context):
    """A Simple RPC

    Gets the face details of all photos in an album
    and save it to database
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FaceApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'cropAlbumFaces': grpc.unary_unary_rpc_method_handler(
          servicer.cropAlbumFaces,
          request_deserializer=kuruvi__pb2.AlbumFolder.FromString,
          response_serializer=kuruvi__pb2.JobStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.FaceApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class FaceCoreStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.detectFaces = channel.unary_unary(
        '/kuruvi.FaceCore/detectFaces',
        request_serializer=kuruvi__pb2.PhotoURL.SerializeToString,
        response_deserializer=kuruvi__pb2.BoundingBoxes.FromString,
        )


class FaceCoreServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def detectFaces(self, request, context):
    """A Simple RPC

    Gets the face details of all photos in an album
    and save it to database
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FaceCoreServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'detectFaces': grpc.unary_unary_rpc_method_handler(
          servicer.detectFaces,
          request_deserializer=kuruvi__pb2.PhotoURL.FromString,
          response_serializer=kuruvi__pb2.BoundingBoxes.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.FaceCore', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class FaceDescribeStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.describeFaces = channel.unary_unary(
        '/kuruvi.FaceDescribe/describeFaces',
        request_serializer=kuruvi__pb2.AlbumFolder.SerializeToString,
        response_deserializer=kuruvi__pb2.FacePoints.FromString,
        )


class FaceDescribeServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def describeFaces(self, request, context):
    """A Simple RPC

    Gets the face details of all photos in an album
    and save it to database
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FaceDescribeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'describeFaces': grpc.unary_unary_rpc_method_handler(
          servicer.describeFaces,
          request_deserializer=kuruvi__pb2.AlbumFolder.FromString,
          response_serializer=kuruvi__pb2.FacePoints.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.FaceDescribe', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class FaceCropStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.cropFaces = channel.unary_unary(
        '/kuruvi.FaceCrop/cropFaces',
        request_serializer=kuruvi__pb2.CropFacesRequest.SerializeToString,
        response_deserializer=kuruvi__pb2.JobStatus.FromString,
        )


class FaceCropServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def cropFaces(self, request, context):
    """A Simple RPC

    For the given photodetails and bounding boxes,
    crop and save faces
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FaceCropServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'cropFaces': grpc.unary_unary_rpc_method_handler(
          servicer.cropFaces,
          request_deserializer=kuruvi__pb2.CropFacesRequest.FromString,
          response_serializer=kuruvi__pb2.JobStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.FaceCrop', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ResizeApiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.resizePhotos = channel.unary_unary(
        '/kuruvi.ResizeApi/resizePhotos',
        request_serializer=kuruvi__pb2.AlbumFolder.SerializeToString,
        response_deserializer=kuruvi__pb2.JobStatus.FromString,
        )


class ResizeApiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def resizePhotos(self, request, context):
    """A Simple RPC

    For the given album, resize and save to disk
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ResizeApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'resizePhotos': grpc.unary_unary_rpc_method_handler(
          servicer.resizePhotos,
          request_deserializer=kuruvi__pb2.AlbumFolder.FromString,
          response_serializer=kuruvi__pb2.JobStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.ResizeApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class StorageApiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.saveFolderDetails = channel.unary_unary(
        '/kuruvi.StorageApi/saveFolderDetails',
        request_serializer=kuruvi__pb2.AlbumFolder.SerializeToString,
        response_deserializer=kuruvi__pb2.JobStatus.FromString,
        )


class StorageApiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def saveFolderDetails(self, request, context):
    """A Simple RPC

    Saves the album details and photo details in database
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StorageApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'saveFolderDetails': grpc.unary_unary_rpc_method_handler(
          servicer.saveFolderDetails,
          request_deserializer=kuruvi__pb2.AlbumFolder.FromString,
          response_serializer=kuruvi__pb2.JobStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.StorageApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class PgsqlApiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.organizeData = channel.unary_unary(
        '/kuruvi.PgsqlApi/organizeData',
        request_serializer=kuruvi__pb2.AlbumFolder.SerializeToString,
        response_deserializer=kuruvi__pb2.JobStatus.FromString,
        )


class PgsqlApiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def organizeData(self, request, context):
    """A Simple RPC

    Saves the album details and photo details in database
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PgsqlApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'organizeData': grpc.unary_unary_rpc_method_handler(
          servicer.organizeData,
          request_deserializer=kuruvi__pb2.AlbumFolder.FromString,
          response_serializer=kuruvi__pb2.JobStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kuruvi.PgsqlApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
